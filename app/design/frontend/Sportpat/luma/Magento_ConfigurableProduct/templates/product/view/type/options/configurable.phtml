<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

// @codingStandardsIgnoreFile

?>
<style>
    select.super-attribute-select {
        font-size:18px;
        height:42px;
    }
</style>
<?php
/** @var $block \Magento\ConfigurableProduct\Block\Product\View\Type\Configurable*/
$_product    = $block->getProduct();
$_attributes = $block->decorateArray($block->getAllowAttributes());
$_objectManager = \Magento\Framework\App\ObjectManager::getInstance();
$imageHelper  = $_objectManager->get('\Magento\Catalog\Helper\Image');

?>
<?php if ($_product->isSaleable() && count($_attributes)):?>
    <?php 

    $isrendered = false;

    foreach($_attributes as $_attribute) {

        if($isrendered === false) {

            if ($_attribute->getAttributeId() == 93) {
                ?>
                <!-- CUSTOM SWATCHES MADE FROM DROPDOWNS BY NICK -->

                <?php
                $_children = $_product->getTypeInstance()->getUsedProducts($_product);
                $_images = [];
                $color = "";
                $imagename = "";
                $done = array();
                $i = 0;



                foreach ($_children as $child) {



                    if ($color == "" && $imagename == "") {
                        $color = $child->getAttributeText('color');
                        $imagename = $child->getImage();
                        $image_url = $imageHelper->init($child, 'product_thumbnail_image')->setImageFile($child->getFile())->constrainOnly(FALSE)->keepAspectRatio(TRUE)->keepFrame(TRUE)->resize(110)->getUrl();

                        $_images[] = ["childId" => $child->getId(), "selected" => false, "color" => $child->getColor(), "color_text" => $child->getAttributeText('color'), "image" => $image_url];


                    } else {
                        if ($child->getAttributeText('color') != $color && $child->getImage() != $imagename) {
                            $image_url = $imageHelper->init($child, 'product_thumbnail_image')->setImageFile($child->getFile())->constrainOnly(FALSE)->keepAspectRatio(TRUE)->keepFrame(TRUE)->resize(110)->getUrl();


                            $_images[] = ["childId" => $child->getId(), "selected" => false, "color" => $child->getColor(), "color_text" => $child->getAttributeText('color'), "image" => $image_url];
                            array_push($done, $image_url);
                        }
                    }
                    $color = $child->getAttributeText('color');
                    $image_url = $imageHelper->init($child, 'product_thumbnail_image')->setImageFile($child->getFile())->constrainOnly(FALSE)->keepAspectRatio(TRUE)->keepFrame(TRUE)->resize(110)->getUrl();

                    $imagename = $child->getImage();


                    $i++;

                }


                ?>

                <label class="label col-12 p-0 mt-4 mb-4" for="attribute<?= $_attribute->getAttributeId() ?>">
                    <div class="alert alert-danger col-12 ml-0 mr-0" role="alert" id="color-selected-warning">Please Select a Color</div>
                </label>
                <div class="field configurable required">
                    <div class="control" style="display:none;">
                        <select name="super_attribute[<?= $_attribute->getAttributeId() ?>]"
                                data-selector="super_attribute[<?= $_attribute->getAttributeId() ?>]"
                                data-validate="{required:true}"
                                id="attribute<?= $_attribute->getAttributeId() ?>"
                                class="super-attribute-select">
                            <option value=""><?= __('Choose an Option...') ?></option>
                        </select>
                    </div>

                    <ul class="images-swatch">
                        <?php

                        $len = count($_images);

                        if ($len == 1) {
                            ?>
                            <li class="image swatch">
                                <a href="javascript:void(0);">
                                    <img src="<?php echo $_images[0]["image"]; ?>" width="90"
                                         height="auto" data-id="<?php echo $_images[0]["color"]; ?>"
                                         data-color="<?php echo $_images[0]["color_text"]; ?>" alt="" title="">
                                </a>
                            </li>
                            <?php
                        } else if ($len > 1) {


                            foreach ($_images as $imm) {

                                if ($imm["selected"] == true) {
                                    $cl = "";
                                } else {
                                    $cl = "";
                                }

                                if (!empty($done) && !in_array($imm["color_text"], $done)):
                                    ?>
                                    <li class="image swatch">
                                        <a href="javascript:void(0);">
                                            <img src="<?php echo $imm["image"]; ?>" width="90"
                                                 height="auto" data-id="<?php echo $imm["color"]; ?>"
                                                 data-color="<?php echo $imm["color_text"]; ?>" alt=""
                                                 title="<?php echo $imm["color_text"]; ?>" <?php echo $cl; ?> >
                                        </a>
                                    </li>
                                <?php


                                endif;

                                array_push($done, $imm["color_text"]);
                            }


                        }
                        ?>
                    </ul>
                </div>

                <!-- END CUSTOM SWATCHES -->


                <?php

            } else {
                ?>
                <!-- REGULAR CONFIGURABLE PRODUCTS DROPDOWNS -->
                <div class="field configurable">
                    <label class="label" for="attribute<?= $_attribute->getAttributeId() ?>">
                        <div class="col-12">Select a Size</div>
                    </label>
                    <div class="control">
                        <select name="super_attribute[<?= $_attribute->getAttributeId() ?>]"
                                data-selector="super_attribute[<?= $_attribute->getAttributeId() ?>]"
                                data-validate="{required:false}"
                                id="attribute<?= $_attribute->getAttributeId() ?>"
                                class="super-attribute-select">
                            <option value=""><?= __('Choose an Option...') ?></option>
                        </select>
                    </div>
                </div>


                <?php
                $isrendered = true;

            }
        }
        ?><?php

    }

    ?>
    <script type="text/x-magento-init">
        {
            "#product_addtocart_form": {
                "configurable": {
                    "spConfig": <?= /* @escapeNotVerified */ $block->getJsonConfig() ?>,
                    "gallerySwitchStrategy": "<?php /* @escapeNotVerified */ echo $block->getVar('gallery_switch_strategy',
            'Magento_ConfigurableProduct') ?: 'replace'; ?>"
                }
            }
        }
    </script>
<?php endif;?>
<script type="text/javascript">
    require([
        'jquery'
    ], function ($) {

        var activeswatch = $(".clicked-active");

        activeswatch.removeClass("clicked-active");
        var colortext = "";
       


        var images = $("ul.images-swatch > li > a > img");

        var n = 0;


        function setAsSelected(item) {

            let name = $(item).html();
            if(name.indexOf('Out of stock')) {
                return false;
            } else {
                return true;
            }

        }

        const firstImage = $(images).first();


        $.each(images, function(i, el){



            $(el).on('mouseenter', function(e){

                $(".hover-active").removeClass('hover-active');
                $(this).addClass('hover-active');
            });

            $(el).on('mouseleave', function(e){

                $(this).removeClass('hover-active');

            });
            var label = $("label.label[for='attribute93']");

            if(colortext === "") {
                label.html('<div class="alert alert-warning" role="alert" id="color-selected-text">Please Select a Color</div>');
            } else {
                label.html('<div class="alert alert-warning" role="alert" id="color-selected-text">You selected: '+colortext+'</div>');
            }

            $(el).on('click', function(e){
              $("select#attribute93 option:selected").prop('selected',false).change();

                $(".hover-active").removeClass('hover-active');
                $(".clicked-active").removeClass('clicked-active');
                $(this).addClass('clicked-active');


               colortext = $(this).attr('data-color');

                    label.html('<div class="alert alert-success col-12 ml-0 mr-0" role="alert" id="color-selected-text">You selected: <strong>'+colortext+'</strong></div>');




                $("select#attribute93 option[value="+$(this).attr('data-id')+"]").attr('selected','selected').change();

                $("select#attribute144").removeAttr('disabled');


                $("#product-addtocart-button").removeAttr('disabled');

            });









            n = n+1

        });


            var rkeyEvent = /^key/,
                rmouseEvent = /^(?:mouse|contextmenu)|click/;

            $.fn.simulate = function( type, options ) {
                return this.each(function() {
                    new $.simulate( this, type, options );
                });
            };

            $.simulate = function( elem, type, options ) {
                var method = $.camelCase( "simulate-" + type );

                this.target = elem;
                this.options = options;

                if ( this[ method ] ) {
                    this[ method ]();
                } else {
                    this.simulateEvent( elem, type, options );
                }
            };

            $.extend( $.simulate, {

                keyCode: {
                    BACKSPACE: 8,
                    COMMA: 188,
                    DELETE: 46,
                    DOWN: 40,
                    END: 35,
                    ENTER: 13,
                    ESCAPE: 27,
                    HOME: 36,
                    LEFT: 37,
                    NUMPAD_ADD: 107,
                    NUMPAD_DECIMAL: 110,
                    NUMPAD_DIVIDE: 111,
                    NUMPAD_ENTER: 108,
                    NUMPAD_MULTIPLY: 106,
                    NUMPAD_SUBTRACT: 109,
                    PAGE_DOWN: 34,
                    PAGE_UP: 33,
                    PERIOD: 190,
                    RIGHT: 39,
                    SPACE: 32,
                    TAB: 9,
                    UP: 38
                },

                buttonCode: {
                    LEFT: 0,
                    MIDDLE: 1,
                    RIGHT: 2
                }
            });

            $.extend( $.simulate.prototype, {

                simulateEvent: function( elem, type, options ) {
                    var event = this.createEvent( type, options );
                    this.dispatchEvent( elem, type, event, options );
                },

                createEvent: function( type, options ) {
                    if ( rkeyEvent.test( type ) ) {
                        return this.keyEvent( type, options );
                    }

                    if ( rmouseEvent.test( type ) ) {
                        return this.mouseEvent( type, options );
                    }
                },

                mouseEvent: function( type, options ) {
                    var event, eventDoc, doc, body;
                    options = $.extend({
                        bubbles: true,
                        cancelable: (type !== "mousemove"),
                        view: window,
                        detail: 0,
                        screenX: 0,
                        screenY: 0,
                        clientX: 1,
                        clientY: 1,
                        ctrlKey: false,
                        altKey: false,
                        shiftKey: false,
                        metaKey: false,
                        button: 0,
                        relatedTarget: undefined
                    }, options );

                    if ( document.createEvent ) {
                        event = document.createEvent( "MouseEvents" );
                        event.initMouseEvent( type, options.bubbles, options.cancelable,
                            options.view, options.detail,
                            options.screenX, options.screenY, options.clientX, options.clientY,
                            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,
                            options.button, options.relatedTarget || document.body.parentNode );

                        // IE 9+ creates events with pageX and pageY set to 0.
                        // Trying to modify the properties throws an error,
                        // so we define getters to return the correct values.
                        if ( event.pageX === 0 && event.pageY === 0 && Object.defineProperty ) {
                            eventDoc = event.relatedTarget.ownerDocument || document;
                            doc = eventDoc.documentElement;
                            body = eventDoc.body;

                            Object.defineProperty( event, "pageX", {
                                get: function() {
                                    return options.clientX +
                                        ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
                                        ( doc && doc.clientLeft || body && body.clientLeft || 0 );
                                }
                            });
                            Object.defineProperty( event, "pageY", {
                                get: function() {
                                    return options.clientY +
                                        ( doc && doc.scrollTop || body && body.scrollTop || 0 ) -
                                        ( doc && doc.clientTop || body && body.clientTop || 0 );
                                }
                            });
                        }
                    } else if ( document.createEventObject ) {
                        event = document.createEventObject();
                        $.extend( event, options );
                        // standards event.button uses constants defined here: http://msdn.microsoft.com/en-us/library/ie/ff974877(v=vs.85).aspx
                        // old IE event.button uses constants defined here: http://msdn.microsoft.com/en-us/library/ie/ms533544(v=vs.85).aspx
                        // so we actually need to map the standard back to oldIE
                        event.button = {
                            0: 1,
                            1: 4,
                            2: 2
                        }[ event.button ] || ( event.button === -1 ? 0 : event.button );
                    }

                    return event;
                },

                keyEvent: function( type, options ) {
                    var event;
                    options = $.extend({
                        bubbles: true,
                        cancelable: true,
                        view: window,
                        ctrlKey: false,
                        altKey: false,
                        shiftKey: false,
                        metaKey: false,
                        keyCode: 0,
                        charCode: undefined
                    }, options );

                    if ( document.createEvent ) {
                        try {
                            event = document.createEvent( "KeyEvents" );
                            event.initKeyEvent( type, options.bubbles, options.cancelable, options.view,
                                options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,
                                options.keyCode, options.charCode );
                            // initKeyEvent throws an exception in WebKit
                            // see: http://stackoverflow.com/questions/6406784/initkeyevent-keypress-only-works-in-firefox-need-a-cross-browser-solution
                            // and also https://bugs.webkit.org/show_bug.cgi?id=13368
                            // fall back to a generic event until we decide to implement initKeyboardEvent
                        } catch( err ) {
                            event = document.createEvent( "Events" );
                            event.initEvent( type, options.bubbles, options.cancelable );
                            $.extend( event, {
                                view: options.view,
                                ctrlKey: options.ctrlKey,
                                altKey: options.altKey,
                                shiftKey: options.shiftKey,
                                metaKey: options.metaKey,
                                keyCode: options.keyCode,
                                charCode: options.charCode
                            });
                        }
                    } else if ( document.createEventObject ) {
                        event = document.createEventObject();
                        $.extend( event, options );
                    }

                    if ( !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() ) || (({}).toString.call( window.opera ) === "[object Opera]") ) {
                        event.keyCode = (options.charCode > 0) ? options.charCode : options.keyCode;
                        event.charCode = undefined;
                    }

                    return event;
                },

                dispatchEvent: function( elem, type, event ) {
                    if ( elem.dispatchEvent ) {
                        elem.dispatchEvent( event );
                    } else if ( type === "click" && elem.click && elem.nodeName.toLowerCase() === "input" ) {
                        elem.click();
                    } else if ( elem.fireEvent ) {
                        elem.fireEvent( "on" + type, event );
                    }
                },

                simulateFocus: function() {
                    var focusinEvent,
                        triggered = false,
                        element = $( this.target );

                    function trigger() {
                        triggered = true;
                    }

                    element.bind( "focus", trigger );
                    element[ 0 ].focus();

                    if ( !triggered ) {
                        focusinEvent = $.Event( "focusin" );
                        focusinEvent.preventDefault();
                        element.trigger( focusinEvent );
                        element.triggerHandler( "focus" );
                    }
                    element.unbind( "focus", trigger );
                },

                simulateBlur: function() {
                    var focusoutEvent,
                        triggered = false,
                        element = $( this.target );

                    function trigger() {
                        triggered = true;
                    }

                    element.bind( "blur", trigger );
                    element[ 0 ].blur();

                    // blur events are async in IE
                    setTimeout(function() {
                        // IE won't let the blur occur if the window is inactive
                        if ( element[ 0 ].ownerDocument.activeElement === element[ 0 ] ) {
                            element[ 0 ].ownerDocument.body.focus();
                        }

                        // Firefox won't trigger events if the window is inactive
                        // IE doesn't trigger events if we had to manually focus the body
                        if ( !triggered ) {
                            focusoutEvent = $.Event( "focusout" );
                            focusoutEvent.preventDefault();
                            element.trigger( focusoutEvent );
                            element.triggerHandler( "blur" );
                        }
                        element.unbind( "blur", trigger );
                    }, 1 );
                }
            });



            /** complex events **/

            function findCenter( elem ) {
                var offset,
                    document = $( elem.ownerDocument );
                elem = $( elem );
                offset = elem.offset();

                return {
                    x: offset.left + elem.outerWidth() / 2 - document.scrollLeft(),
                    y: offset.top + elem.outerHeight() / 2 - document.scrollTop()
                };
            }

            function findCorner( elem ) {
                var offset,
                    document = $( elem.ownerDocument );
                elem = $( elem );
                offset = elem.offset();

                return {
                    x: offset.left - document.scrollLeft(),
                    y: offset.top - document.scrollTop()
                };
            }

            $.extend( $.simulate.prototype, {
                simulateDrag: function() {
                    var i = 0,
                        target = this.target,
                        eventDoc = target.ownerDocument,
                        options = this.options,
                        center = options.handle === "corner" ? findCorner( target ) : findCenter( target ),
                        x = Math.floor( center.x ),
                        y = Math.floor( center.y ),
                        coord = { clientX: x, clientY: y },
                        dx = options.dx || ( options.x !== undefined ? options.x - x : 0 ),
                        dy = options.dy || ( options.y !== undefined ? options.y - y : 0 ),
                        moves = options.moves || 3;

                    this.simulateEvent( target, "mousedown", coord );

                    for ( ; i < moves ; i++ ) {
                        x += dx / moves;
                        y += dy / moves;

                        coord = {
                            clientX: Math.round( x ),
                            clientY: Math.round( y )
                        };

                        this.simulateEvent( eventDoc, "mousemove", coord );
                    }

                    if ( $.contains( eventDoc, target ) ) {
                        this.simulateEvent( target, "mouseup", coord );
                        this.simulateEvent( target, "click", coord );
                    } else {
                        this.simulateEvent( eventDoc, "mouseup", coord );
                    }
                }
            });


            setTimeout(function(){
                firstImage.addClass('clicked-active');
                const dataid = firstImage.attr('data-id');
                console.log(firstImage);
                $("select#attribute93 option[value=" + dataid + "]").attr('selected', 'selected').change();
                firstImage.simulate("click");
            }, 500);




    });
</script>
<style>





    .product-info-main .product.alert {
        display:block;
        float:left;
        padding:15px;
        background:red;
        color:#fff !important;
    }

    .product-info-main .product.alert a {
        color:#fff !important;
        font-size:18px;
        font-weight:700;
    }

    .product-info-main .product-add-form {
        padding-top:0;
    }
    .product-options-wrapper {
        display:block;
        float:left;
        height:auto;
        overflow:hidden;
        width:100%;
    }
    ul.images-swatch {
        margin:0;
        padding:0;
        display:block;
        float:left;
        width:100%;
        height:auto;
        overflow:hidden;
    }

    ul.images-swatch > li {
        margin-top:10px;
        display:block;
        float:left;
        width:calc(100% / 5);
        height:125px;
    // height:auto;
        overflow:hidden;

    }

    ul.images-swatch > li > a > img {
        padding:5px;
        border:1px #efefef solid;
    }

    ul.images-swatch > li > a > img.clicked-active {
        border-color:red;
    }

    .stock {
        display:none !important;
    }

    .item.cms_page, .paypal {
        display:none !important;
    }

    .breadcrumbs {
        margin-bottom:50px;
    }
</style>